name: Build

on: [push, pull_request]

env:
  FRIENDLY_NAME: AMI NTFS Bug
  EDK2_BUILD_TYPE: RELEASE
  MSVC_BUILD_TYPE: Release
  EDK2_COMPILER: GCC5
  TARGET_TYPE: x64
  TARGET_ARCH: X64

jobs:
  # EDK2 UEFI app build job
  EDK2-Build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Linux environment
      run: |
        sudo apt-get update
        sudo apt-get -y --no-install-recommends install python3-distutils nasm uuid-dev gcc-multilib

    - name: Set up EDK2
      run: |
        git clone --recursive https://github.com/tianocore/edk2.git
        make -C edk2/BaseTools

    - name: Build UEFI application
      run: |
        export WORKSPACE=$PWD
        export PACKAGES_PATH=$WORKSPACE:$WORKSPACE/edk2
        source edk2/edksetup.sh
        build -a ${{ env.TARGET_ARCH }} -b ${{ env.EDK2_BUILD_TYPE }} -t ${{ env.EDK2_COMPILER }} -p AmiNtfsBugPkg.dsc
        mv Build/${{ env.EDK2_BUILD_TYPE }}_${{ env.EDK2_COMPILER }}/${{ env.TARGET_ARCH }}/AmiNtfsBug.efi .

    - name: Display SHA-256
      run: sha256sum *.efi

    - name: Upload EDK2 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: uefi_${{ env.TARGET_TYPE }}
        path: ./*.efi

  # MSVC Windows app build job
  VS2022-Build:
    needs: EDK2-Build
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Set version
      shell: bash
      id: set_version
      run: |
        git_tag=$(git describe --tags --abbrev=0 || echo v0.0)
        echo "version=$git_tag" >> $GITHUB_OUTPUT

    - name: Build
      shell: pwsh
      run: |
        # Build the GitHub Actions log URL for the current build
        $BUILD_URL="$Env:GITHUB_SERVER_URL/$Env:GITHUB_REPOSITORY/actions/runs/$Env:GITHUB_RUN_ID"
        # Build a version field for VERSION_INFO, by:
        # - Removing anything that's not a digit or a dot, and replacing dots by commas ("v2.3" -> "2,3")
        $FILE_VERSION="${{ steps.set_version.outputs.version }}" -replace '[^0-9.]' -replace '\.',','
        # - Appending ",0" so that we end up with 4 sequences ("2,3" -> "2,3,0,0")
        while (($FILE_VERSION.ToCharArray() -eq ',').count -lt 3) { $FILE_VERSION = $FILE_VERSION + ",0" }
        # - Replacing commas with "%2c" since /p chokes on them even if the value is quoted ("2,3,0,0" -> "2%2c3%2c0%2c0")
        $FILE_VERSION=$FILE_VERSION -replace ',','%2c'
        # We'll use the VERSION_INFO 'Comments' field to insert some JSON data pertaining to this specific build
        # Note that we use JSON5 here, on account that RC.exe removes ALL doubles quotes from VERSION_INFO fields
        $JSON=@"
        {
          "Title": "Build Descriptor",
          "Version": 1.0,
          "Build": {
            "Facility": "GitHub Actions",
            "Url": "$BUILD_URL",
            "Repo": {
              "Branch": "$Env:GITHUB_REF_NAME",
              "Commit": "$Env:GITHUB_SHA",
              "License": "GPLv3+",
              "Name": "$Env:GITHUB_REPOSITORY",
              "Provider": "$Env:GITHUB_SERVER_URL",
              "Scm": "git"
            }
          }
        }
        "@
        $JSON=$JSON -replace '\n','' -replace '\s+',' ' -replace ',','%2c' -replace '"',"'"
        msbuild ${{ github.event.repository.name }}.sln /m /p:Configuration=${{ env.MSVC_BUILD_TYPE }} /p:Platform=,Platform=${{ env.TARGET_TYPE }} /p:AppVersion=${{ steps.set_version.outputs.version }} /p:AppFileVersion="$FILE_VERSION" /p:AppComments="$JSON"

    - name: Display SHA-256
      run: sha256sum ./${{ env.TARGET_TYPE }}/${{ env.MSVC_BUILD_TYPE }}/*.exe

    - name: Download EDK2 artifacts
      uses: actions/download-artifact@v4
      with:
        name: uefi_${{ env.TARGET_TYPE }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: ${{ github.event_name == 'push' }}
      with:
        name: windows_${{ env.TARGET_TYPE }}
        path: ./${{ env.TARGET_TYPE }}/${{ env.MSVC_BUILD_TYPE }}/*.exe

    - name: Create release archive
      if: startsWith(github.ref, 'refs/tags/')
      run: 7z a ${{ github.event.repository.name }}_${{ env.TARGET_TYPE }}.zip ./${{ env.TARGET_TYPE }}/${{ env.MSVC_BUILD_TYPE }}/*.exe *.efi list.txt runme.nsh README.md LICENSE.txt

    - name: Upload release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        body: ${{ env.FRIENDLY_NAME}} ${{ steps.set_version.outputs.version }}
        files: ./*.zip
